# Generated by Django 3.2.12 on 2023-01-18 12:06

import django.contrib.postgres.fields
from django.db import migrations, models

# First, convert the JSON-formatted list to an array-formatted one. The
# AlterField at the end actually converts the column type with the default
# text[] cast, which now works as the content is a valid text array.
QUERIES = (
    """
    CREATE FUNCTION j_to_a(content text) RETURNS text[] AS $$
    DECLARE
      result text[] = '{}'::text[];
    BEGIN
      IF content != '' THEN
        BEGIN
          SELECT array_agg(sub.r) INTO result
          FROM (SELECT json_array_elements_text(content::json) AS r) AS sub;
        EXCEPTION
          WHEN invalid_text_representation THEN RETURN content::text[];
        END;
      END IF;
      RETURN result;
    END;
    $$ LANGUAGE plpgsql
    """,
    "UPDATE maasserver_rdns SET hostnames = j_to_a(hostnames)",
    "DROP FUNCTION j_to_a",
)


class Migration(migrations.Migration):

    dependencies = [
        ("maasserver", "0290_migrate_node_power_parameters"),
    ]

    operations = [
        *(migrations.RunSQL(query) for query in QUERIES),
        migrations.AlterField(
            model_name="rdns",
            name="hostnames",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(), default=list, size=None
            ),
        ),
    ]
