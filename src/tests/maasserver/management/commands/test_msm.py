# Copyright 2024 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

from django.core.management.base import CommandError
import pytest

from maasserver.management.commands import msm

# actual, expired token generated by MSM for enrolment
SAMPLE_JWT_TOKEN = (
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9."
    "eyJzdWIiOiJiOWMyMDQ4YS1lMmMyLTQxY2MtODExMy1iZDRiMDZjN2RjY"
    "TYiLCJpc3MiOiI2M2VmM2FhNC0zNjY5LTQ3NzYtOTczMS03MzEzODI2MG"
    "E5MmEiLCJpYXQiOjE3MTMzMDA3ODMsImV4cCI6MTcxMzMwNDM4MywiYXV"
    "kIjpbInNpdGUiXSwicHVycG9zZSI6ImVucm9sbWVudCIsImVucm9sbWVu"
    "dC11cmwiOiJodHRwczovL21zbS9zaXRlL3YxL2Vucm9sbCJ9."
    "Kp0p0-KpB6lkskh8YLUTNiCyfmjLf-IFOgOh5XJUiVo"
)

# for mocking, since expired tokens won't be decoded
SAMPLE_JWT_PAYLOAD = {
    "sub": "b9c2048a-e2c2-41cc-8113-bd4b06c7dca6",
    "iss": "63ef3aa4-3669-4776-9731-73138260a92a",
    "iat": 1713300783,
    "exp": 1713304383,
    "aud": ["site"],
    "purpose": "enrolment",
    "enrolment-url": "https://msm/site/v1/enroll",
}


@pytest.fixture
def msm_mock(mocker):
    mocker.patch.object(msm, "get_cert_verify_msg", return_value="")
    yield mocker.patch.object(msm, "msm_enrol")


@pytest.mark.usefixtures("maasdb")
class TestMSM:
    def _configure_kwargs(
        self, command=msm.Command.ENROL_COMMAND, token=SAMPLE_JWT_TOKEN
    ) -> dict:
        return {
            "command": command,
            "enrolment_token": token,
            "config_file": "",
        }

    def test_enrol_no(self, mocker, msm_mock):
        mocker.patch.object(msm, "prompt_yes_no", return_value=False)
        mocker.patch.object(msm.jwt, "decode", return_value=SAMPLE_JWT_PAYLOAD)
        opts = self._configure_kwargs()
        msm.Command().handle(**opts)
        msm_mock.assert_not_called()

    def test_enrol_yes(self, mocker, msm_mock):
        mocker.patch.object(msm, "prompt_yes_no", return_value=True)
        mocker.patch.object(msm.jwt, "decode", return_value=SAMPLE_JWT_PAYLOAD)
        opts = self._configure_kwargs()
        msm.Command().handle(**opts)
        msm_mock.assert_called_once_with(
            opts["enrolment_token"], metainfo=opts["config_file"]
        )

    def test_enrol_expired_token(self, msm_mock):
        opts = self._configure_kwargs()
        with pytest.raises(CommandError, match="Enrolment token is expired"):
            msm.Command().handle(**opts)

    def test_bogus_token(self, msm_mock):
        opts = self._configure_kwargs()
        opts["enrolment_token"] = "not.a.token"
        with pytest.raises(CommandError, match="Invalid enrolment token"):
            msm.Command().handle(**opts)
