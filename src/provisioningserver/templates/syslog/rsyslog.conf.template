# Unix socket.
module(load="imuxsock" SysSock.Name="{{work_dir}}/log.sock")

# Enable tcp.
module(load="imtcp")
input(type="imtcp" port="{{port}}")

# Enable udp.
module(load="imudp")
input(type="imudp" port="{{port}}")

# Reduce message repetition.
$RepeatedMsgReduction on

# Set the default permissions for all log files.
$FileOwner {{user}}
$FileGroup {{group}}
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022
{{if drop_priv}}
$PrivDropToUser {{user}}
$PrivDropToGroup {{group}}
{{endif}}

# Work directory.
$WorkDirectory {{work_dir}}

$ActionQueueType LinkedList # use asynchronous processing
$ActionResumeRetryCount -1 # infinite retries on insert failure
$ActionQueueSaveOnShutdown on # save in-memory data if rsyslog shuts down

# System journal logging
module(load="omjournal")

# Template for ex-`maas.log`: no alteration needed, can use `list`.
template(name="MAASjournal" type="list") {
  constant(value="maas-log" outname="SYSLOG_IDENTIFIER")
  property(name="rawmsg-after-pri" outname="MESSAGE")
}

template(name="MAASnginxaccess" type="list") {
  constant(value="maas-http" outname="SYSLOG_IDENTIFIER")
  property(name="msg" outname="MESSAGE")
  constant(value="7" outname="PRIORITY")
}

{{if write_local}}
# Just in case some of the user-deployed apps use slashes in tags
global(parser.permitSlashInProgramName="on")

# `subtree` template type allows altering the message (with `set`),
# compared to `list` where you can only specify the property name.
template(name="MAASremote" type="subtree" subtree="$!remote")

if $programname == "maas_nginx" and $inputname == "imuxsock" then {
  action(type="omjournal" template="MAASnginxaccess")
} else if $syslogtag contains "maas" then {
  action(type="omjournal" template="MAASjournal")
} else {
  # Convenience fields to filter the logs with journalctl
  set $!remote!MAAS_MACHINE_HOSTNAME = $hostname;
  set $!remote!MAAS_MACHINE_IP = $fromhost-ip;
  set $!remote!MAAS_MACHINE_SYSLOG_TAG = $programname;
  set $!remote!MAAS_MACHINE_PID = $procid;
  # Save original timestamp for time sync debugging
  set $!remote!MAAS_MACHINE_TIMESTAMP = $timereported;
  # Debug priority for machine logs
  set $!remote!PRIORITY = "7";

  # Prefix log message with a machine identifier appropriate for the node status
  if $hostname == "maas-enlisting-node" then {
    set $!remote!SYSLOG_IDENTIFIER = "maas-enlist";
    set $.machineid = $fromhost-ip;
  } else {
    set $!remote!SYSLOG_IDENTIFIER = "maas-machine";
    set $.machineid = $hostname;
  }
  set $!remote!MESSAGE = "[" & $.machineid & "] " & $syslogtag & $msg;

  action(type="omjournal" template="MAASremote")
}
{{endif}}


# Discard all messages that are not UDP from this point forward. TCP messages
# have already been forwarded from the original UDP message and should not be
# forwarded again. This prevents an infinite loop of messages between
# region+rack controllers.
:inputname, isequal, "imtcp" stop

{{if forwarders}}
# Forward all UDP messages to all the region controllers. TCP messages will
# not make it to this point because of the stop above.
{{for server in forwarders}}
*.* action(type="omfwd" target="{{server['ip']}}" port="{{port}}" protocol="tcp"
           queue.filename="{{server['name']}}")
{{endfor}}
{{endif}}


{{if promtail_port > 0}}
# Forward to promtail
*.* action(type="omfwd" protocol="tcp" target="localhost" port="{{promtail_port}}" 
           Template="RSYSLOG_SyslogProtocol23Format" 
           TCP_Framing="octet-counted" queue.filename="promtail")
{{endif}}

{{if not write_local}}
# rack-only controller still logs to a local maas.log.
if $programname == "maas_nginx" and $inputname == "imuxsock" then {
  action(type="omjournal" template="MAASnginxaccess")
} else if $syslogtag contains "maas" then {
  action(type="omjournal" template="MAASjournal")
}
{{endif}}

# Done.
*.* stop
