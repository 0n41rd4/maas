#!/bin/bash

# This script provides a bootable custom Ubuntu image for development purposes

set -e
set -o pipefail

trap teardown EXIT

PWD="$(pwd)"
WORK_DIR="$(mktemp -d ./tmp-XXXX)"

OS="${OS:-ubuntu}"
OS_VERSION="${OS_VERSION:-20.04}"
OS_REV="${OS_REV:-.3}"
IMAGE_TYPE="${IMAGE_TYPE:-live-server}"
OS_ARCH="${OS_ARCH:-amd64}"
OUTPUT_DIR=/tmp
DISK_SIZE="4G"

CACHE_DIR="${CACHE_DIR:-${PWD}/cache}"
BASE_IMAGE_FILE="${BASE_IMAGE_FILE:-${OS}-${OS_VERSION}${OS_REV}-${IMAGE_TYPE}-${OS_ARCH}.iso}"
BASE_IMAGE_PATH="${BASE_IMAGE_PATH:-${BASE_IMAGE_FILE}}"
BASE_IMAGE_URL="${BASE_IMAGE_URL:-https://releases.ubuntu.com/${OS_VERSION}/${BASE_IMAGE_FILE}}"
BASE_IMAGE_CHECKSUM="http://releases.ubuntu.com/${OS_VERSION}/SHA256SUMS"
OUTPUT_FILE="custom-${OS}-${OS_VERSION}-${OS_ARCH}.img"

pull_image () {
    if [ ! -f "${CACHE_DIR}/${BASE_IMAGE_PATH}" ]; then
        echo "Downloading Base Ubuntu Image..."
        mkdir -p "${CACHE_DIR}"
        pushd "${CACHE_DIR}"
        curl -L -o "${BASE_IMAGE_PATH}" "${BASE_IMAGE_URL}"
        curl "${BASE_IMAGE_CHECKSUM}" | shasum -c --ignore-missing
        popd
    fi
}

mount_resources () {
    echo "mounting boot resources in"
    mkdir -p "${WORK_DIR}/mnt/${OS}-${OS_VERSION}"
    mount -r "${CACHE_DIR}/${BASE_IMAGE_PATH}" "${WORK_DIR}/mnt/${OS}-${OS_VERSION}"
}

create_user_data () {
    echo "writing user-data"
    cat > "${WORK_DIR}/user-data" <<EOF
#cloud-config
autoinstall:
    version: 1
    locale: en_US
    user-data:
        disabe_root: false
    keyboard:
        layout: en
        variant: us
    identity:
        hostname: ubuntu-server
        password: "$(mkpasswd --method=SHA-512 --rounds=4096)"
        username: ubuntu
    ssh:
        install-server: true
    storage:
        swap:
            size: 0
        layout:
            name: lvm
    late-commands:
        - mkdir -p /target/curtin
        - touch /target/curtin/curtin-hooks
        - chmod 750 /target/curtin/curtin-hooks
EOF

    touch "${WORK_DIR}/meta-data"
    # you can add other files you need during the installation here
    cloud-localds "${WORK_DIR}/seeds.iso" "${WORK_DIR}/user-data" "${WORK_DIR}/meta-data"
}

create_output_file () {
    echo "creating output image file"
    if [ ! -f "${OUTPUT_DIR}/${OUTPUT_FILE}" ]; then
        truncate -s "${DISK_SIZE}" "${OUTPUT_DIR}/${OUTPUT_FILE}"
    fi
}

build () {
    echo "running build VM"
    kvm -no-reboot -m 2048\
        -nographic\
        -drive file="${OUTPUT_DIR}/${OUTPUT_FILE}",format=raw,cache=none,if=virtio\
        -drive file="${WORK_DIR}/seeds.iso",format=raw,cache=none,if=virtio\
        -cdrom "${CACHE_DIR}/${BASE_IMAGE_PATH}"\
        -kernel "${WORK_DIR}/mnt/${OS}-${OS_VERSION}/casper/vmlinuz"\
        -initrd "${WORK_DIR}/mnt/${OS}-${OS_VERSION}/casper/initrd"\
        -append 'console=ttyS0 autoinstall'
}

teardown () {
    echo "tearing down workspace"
    [ -d "${WORK_DIR}/mnt/${OS}-${OS_VERSION}" ] && umount "${WORK_DIR}/mnt/${OS}-${OS_VERSION}"
    rm -rf "${WORK_DIR}"
}

main () {
    if [ $UID -ne 0 ]; then
        echo "ERROR: Must be run as root!" >&2
        exit 1
    fi

    pull_image
    mount_resources
    create_user_data
    create_output_file
    build
    echo "created image can be found at: ${OUTPUT_DIR}/${OUTPUT_FILE}"
}

main
