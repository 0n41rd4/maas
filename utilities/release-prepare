#!/bin/bash -e
#
# Prepare a MAAS release by doing the following:
#
# - update python project version
# - add d/changelog entry for the release
# - commit changes
#
# The script must be called with a single argument for the MAAS python version
# to update to.
#

export DEBFULLNAME="${DEBFULLNAME:-$(git config user.name)}"
export DEBEMAIL="${DEBEMAIL:-$(git config user.email)}"

SCRIPT="$(basename "$0")"
MAAS_PATH="$(realpath "$(dirname "$0")/../")"

exit_error() {
    echo "$@" >&2
    exit 1
}

git_tree_clean() {
    git diff-index --quiet HEAD
}

git_show_commit() {
    git show HEAD
}

deb_version() {
    local version
    version="$(echo "$1" | sed 's/a/~alpha/; tend; s/b/~beta/; tend; s/rc/~rc/; :end')"
    epoch="$(head -1 "${MAAS_PATH}/debian/changelog" | sed -n 's|maas (\([1-9]*\):.*|\1|p')"
    if [ -n "$epoch" ]; then
	echo "${epoch}:${version}-0ubuntu1"
    else
	echo "${version}-0ubuntu1"
    fi
}

verbose_version() {
    echo "$1" | sed 's/a/ alpha/; tend; s/b/ beta/; tend; s/rc/ RC/; :end'
}

tag_version() {
    echo "$1" | sed 's/a/-alpha/; tend; s/b/-beta/; tend; s/rc/-rc/; :end'
}

replace_setup_version() {
    local version="$1"
    sed -i 's/\bversion = .*$/version = '"$version"'/' setup.cfg
}

add_debian_changelog() {
    local version="$1"
    dch -v "$(deb_version "$version")" \
        "New upstream release, MAAS $(verbose_version "$version")."
    dch -r ""
}

commit() {
    local version="$1"
    local message
    message="Prepare for $(verbose_version "$version") release"

    git commit -a -m "$message"
}

version="$1"
major_version="$(echo "${version}" | cut -d'.' -f-2)"
current_branch="$(git branch --show-current)"

if [ -z "$version" ]; then
    exit_error "Usage $SCRIPT <MAJOR>.<MINOR>.<MICRO>(a<num>|b<num>|rc<num>)"
elif ! echo "$version" | grep -Eq "^[2-9]+\.[0-9]+\.[0-9]+((a|b|rc)[0-9]+)?$"; then
    echo "Invalid version!" >&2
    exit_error "Usage $SCRIPT <MAJOR>.<MINOR>.<MICRO>(a<num>|b<num>|rc<num>)"
elif [[ "$major_version" != *${current_branch}* ]]; then
    # Verify tags are created from the branch for that version if it exists.
    for branch in $(git ls-remote --heads origin | awk 'FS="/" { print $3 }'); do
	if [[ "$major_version" == *${branch}* ]]; then
	    exit_error "Branch ${branch} exists for version ${version}. Refusing to tag ${current_branch}."
	fi
    done
fi

if ! git_tree_clean; then
    exit_error "Git tree is not clean, please reset."
fi

replace_setup_version "$version"
add_debian_changelog "$version"
commit "$version"
git_show_commit
